name: CI/CD Pipeline for Spring Boot

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행
      - feat/cicd
jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-22.04

    steps:
      # 1️⃣ 저장소 코드 다운로드
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2️⃣ Java 17 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3️⃣ Gradle 빌드
      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build Project
        run: ./gradlew clean build -x test  # 테스트 제외하고 빌드

      - name: Check Build Output
        run: ls -alh build/libs/

      # 4️⃣ 빌드 결과 저장
      - name: Save Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: springboot-app
          path: build/libs/*.jar  # 빌드된 JAR 파일 저장

  deploy:
    name: Deploy to EC2
    needs: build  # 빌드 완료 후 배포 시작
    runs-on: ubuntu-22.04

    steps:
      # 1️⃣ 빌드된 JAR 파일 다운로드
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: springboot-app

      # 2️⃣ EC2에 JAR 파일 업로드
      - name: Upload JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "build/libs/*.jar"
          target: "/home/ubuntu"   # JAR 파일을 /home/ubuntu 폴더로 업로드
          debug: true

      # 3️⃣ EC2 서버에서 애플리케이션 실행
      - name: Deploy Application on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "🔴 기존 애플리케이션 종료"
            sudo fuser -k -n tcp 8080 || true  # 기존 프로세스 종료
            sleep 5
            echo "🚀 새로운 애플리케이션 실행"
            nohup java -jar /home/ubuntu/*.jar > /home/ubuntu/nohup.out 2>&1 &
